class SortMethods():
    #构建一个排序算法的类
    def bubbleSort(self,alist):
        #冒泡排序
        for j in range(1,len(alist)):
            count = 0
            for i in range(0,len(alist)-j):
                if alist[i] > alist[i+1]:
                    alist[i],alist[i+1] = alist[i+1],alist[i]
                    count += 1
            if count == 0:
                break

    def selectionSort(self,alist):
        #选择排序
        for j in range(len(alist)):
            minValue = alist[j]
            for i in range(j+1,len(alist)):
                if alist[i] < minValue:
                    minValue = alist[i]
            alist[j] = minValue

    def insertionSort(self,alist):
        #插入排序
        for i in range(len(alist)):
            for j in range(i,0,-1):
                if alist[i] < alist[j]:
                    alist[i],alist[j] = alist[j],alist[i]

    def shellSort(self,alist):
        #希尔排序
        n = len(alist)
        gap = n//2
        while gap >= 1:
            for i in range(gap,n):
                j = i
                while j>=gap and alist[i] < alist[j-gap]:
                        alist[i],alist[j-gap] = alist[j-gap],alist[i]
                        j -= gap
            gap //= 2

    def quickSort(self,alist,start,end):
        #快速排序
        if start >= end:
            return
        left = start
        right = end
        midValue = alist[start]
        while left<right:
            while left<right and midValue <= alist[right]:
                right -= 1
            alist[left] = alist[right]

            while left<right and midValue > alist[left]:
                left += 1
            alist[right] = alist[left]

        alist[left] = midValue

        self.quickSort(alist,start,left)
        self.quickSort(alist,right+1,end)



    def mergeSort(self,alist):
        #用递归方法进行归并排序
        n = len(alist)
        if n <= 1:
            return alist
        mid = n//2
        leftList = alist[:mid]
        rightList = alist[mid:]

        left = self.mergeSort(leftList)
        right = self.mergeSort(rightList)

        leftPoint,rightPoint = 0,0
        result = []

        while leftPoint<len(left) and rightPoint<len(right):
            if left[leftPoint] <= right[rightPoint]:
                result.append(left[leftPoint])
                leftPoint += 1
            else:
                result.append(right[rightPoint])
                rightPoint += 1
        result = result + left[leftPoint:]
        result = result + right[rightPoint:]
        return result
    
        

if __name__ == '__main__':
    li = [54,26,93,17,77,31,44,55,20]
    print(li)
    s =SortMethods()
    s.bubbleSort(li)
    print(li)
    s.selectionSort(li)
    print(li)
    s.insertionSort(li)
    print(li)
    s.shellSort(li)
    print(li)
    s.quickSort(li,0,len(li)-1)
    print(li)
    result = s.mergeSort(li)
    print(result)
